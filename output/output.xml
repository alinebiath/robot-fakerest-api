<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20190108 11:35:04.561" generator="Robot 3.0.4 (Python 2.7.15 on win32)">
<suite source="C:\exemplos_estudos\Robot_tests\curso_basico\robot-test-api-rest\test-suites\test-suite-manipulation-data.robot" id="s1" name="Test-Suite-Manipulation-Data">
<kw type="setup" name="Connect API" library="keywords-faker-api">
<kw name="Create Session" library="request">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>fakerapi</arg>
<arg>${URL_API}</arg>
<arg>disable_warnings=0</arg>
</arguments>
<msg timestamp="20190108 11:35:05.115" level="INFO">Creating Session using : alias=fakerapi, url=https://fakerestapi.azurewebsites.net/api, headers={},                     cookies=None, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20190108 11:35:05.115" starttime="20190108 11:35:05.105"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:05.115" starttime="20190108 11:35:05.105"></status>
</kw>
<test id="s1-t1" name="TestCase 01: Recording a new book">
<kw name="Record a new book" library="keywords-faker-api">
<kw name="Get File" library="system">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${BODY_POST_PATH}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20190108 11:35:05.115" html="yes" level="INFO">Getting file '&lt;a href="file://C:\exemplos_estudos\Robot_tests\curso_basico\robot-test-api-rest\keywords\body-model-post.json"&gt;C:\exemplos_estudos\Robot_tests\curso_basico\robot-test-api-rest\keywords\body-model-post.json&lt;/a&gt;'.</msg>
<msg timestamp="20190108 11:35:05.115" level="INFO">${body} = {
    "ID": 201,
    "Title": "Teste",
    "Description": "Teste1",
    "PageCount": 210,
    "Excerpt": "Teste",
    "PublishDate": "2018-12-14T13:40:49.455Z"
}</msg>
<status status="PASS" endtime="20190108 11:35:05.115" starttime="20190108 11:35:05.115"></status>
</kw>
<kw name="Post Request" library="request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>alias=fakerapi</arg>
<arg>uri=${URI}</arg>
<arg>data=${body}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190108 11:35:07.412" level="INFO">Post Request using : alias=fakerapi, uri=Books, data=&lt;empty&gt;, headers={u'content-type': u'application/json', u'charset': u'utf-8'}, files=None, allow_redirects=True </msg>
<msg timestamp="20190108 11:35:07.412" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190108 11:35:07.412" starttime="20190108 11:35:05.115"></status>
</kw>
<kw name="Log" library="std">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.412" level="INFO">{"ID":201,"Title":"Teste","Description":"Teste1","PageCount":210,"Excerpt":"Teste","PublishDate":"2018-12-14T13:40:49.455Z"}</msg>
<status status="PASS" endtime="20190108 11:35:07.412" starttime="20190108 11:35:07.412"></status>
</kw>
<kw name="Set Test Variable" library="std">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.412" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190108 11:35:07.412" starttime="20190108 11:35:07.412"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:07.412" starttime="20190108 11:35:05.115"></status>
</kw>
<kw name="Check status code and reason" library="keywords-faker-api">
<arguments>
<arg>200</arg>
<arg>OK</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="std">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>${status_code_expected}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.412" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190108 11:35:07.412" starttime="20190108 11:35:07.412"></status>
</kw>
<kw name="Should Be Equal As Strings" library="std">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.reason}</arg>
<arg>${reason_expected}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.412" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190108 11:35:07.412" starttime="20190108 11:35:07.412"></status>
</kw>
<kw name="Log" library="std">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code} - ${response.reason}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.412" level="INFO">200 - OK</msg>
<status status="PASS" endtime="20190108 11:35:07.412" starttime="20190108 11:35:07.412"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:07.412" starttime="20190108 11:35:07.412"></status>
</kw>
<kw name="Check if Title of the book is correct" library="keywords-faker-api">
<arguments>
<arg>Teste</arg>
</arguments>
<kw name="Dictionary Should Contain Item" library="collection">
<doc>An item of ``key``/``value`` must be found in a `dictionary`.</doc>
<arguments>
<arg>${response.json()}</arg>
<arg>Title</arg>
<arg>${title_expected}</arg>
</arguments>
<status status="PASS" endtime="20190108 11:35:07.412" starttime="20190108 11:35:07.412"></status>
</kw>
<kw name="Log" library="std">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()["Title"]}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.412" level="INFO">Teste</msg>
<status status="PASS" endtime="20190108 11:35:07.422" starttime="20190108 11:35:07.412"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:07.422" starttime="20190108 11:35:07.412"></status>
</kw>
<kw name="Check if PageCount of the book is correct" library="keywords-faker-api">
<arguments>
<arg>210</arg>
</arguments>
<kw name="Convert To Integer" library="std">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${pagecount_expected}</arg>
</arguments>
<assign>
<var>${pagecount_expected_convert}</var>
</assign>
<msg timestamp="20190108 11:35:07.423" level="INFO">${pagecount_expected_convert} = 210</msg>
<status status="PASS" endtime="20190108 11:35:07.424" starttime="20190108 11:35:07.423"></status>
</kw>
<kw name="Should Be Equal As Integers" library="std">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.json()["PageCount"]}</arg>
<arg>${pagecount_expected_convert}</arg>
</arguments>
<status status="PASS" endtime="20190108 11:35:07.424" starttime="20190108 11:35:07.424"></status>
</kw>
<kw name="Log" library="std">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()["PageCount"]}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.425" level="INFO">210</msg>
<status status="PASS" endtime="20190108 11:35:07.425" starttime="20190108 11:35:07.424"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:07.425" starttime="20190108 11:35:07.423"></status>
</kw>
<kw name="Check if Description of the book is correct" library="keywords-faker-api">
<arguments>
<arg>Teste1</arg>
</arguments>
<kw name="Dictionary Should Contain Item" library="collection">
<doc>An item of ``key``/``value`` must be found in a `dictionary`.</doc>
<arguments>
<arg>${response.json()}</arg>
<arg>Description</arg>
<arg>${description_expected}</arg>
</arguments>
<status status="PASS" endtime="20190108 11:35:07.426" starttime="20190108 11:35:07.426"></status>
</kw>
<kw name="Log" library="std">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()["Description"]}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.427" level="INFO">Teste1</msg>
<status status="PASS" endtime="20190108 11:35:07.427" starttime="20190108 11:35:07.427"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:07.427" starttime="20190108 11:35:07.425"></status>
</kw>
<tags>
<tag>insert</tag>
</tags>
<status status="PASS" endtime="20190108 11:35:07.428" critical="yes" starttime="20190108 11:35:05.115"></status>
</test>
<test id="s1-t2" name="TestCase 02: Updating data of">
<kw name="Update data of a existing book ID=" library="keywords-faker-api">
<arguments>
<arg>15</arg>
</arguments>
<kw name="Get File" library="system">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>${BODY_PUT_PATH}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20190108 11:35:07.431" html="yes" level="INFO">Getting file '&lt;a href="file://C:\exemplos_estudos\Robot_tests\curso_basico\robot-test-api-rest\keywords\body-model-put.json"&gt;C:\exemplos_estudos\Robot_tests\curso_basico\robot-test-api-rest\keywords\body-model-put.json&lt;/a&gt;'.</msg>
<msg timestamp="20190108 11:35:07.432" level="INFO">${body} = {
    "ID": 15,
    "Title": "Teste com Robot Framework",
    "Description": "Conceitos de RF",
    "PageCount": 400,
    "Excerpt": "SS",
    "PublishDate": "2018-12-14T13:40:49.455Z"
}</msg>
<status status="PASS" endtime="20190108 11:35:07.432" starttime="20190108 11:35:07.431"></status>
</kw>
<kw name="Put Request" library="request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>alias=fakerapi</arg>
<arg>uri=${URI}/${id_book}</arg>
<arg>data=${body}</arg>
<arg>headers=${HEADERS}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190108 11:35:07.660" level="INFO">Put Request using : alias=fakerapi, uri=Books/15, data={
    "ID": 15,
    "Title": "Teste com Robot Framework",
    "Description": "Conceitos de RF",
    "PageCount": 400,
    "Excerpt": "SS",
    "PublishDate": "2018-12-14T13:40:49.455Z"
},                     headers={u'content-type': u'application/json', u'charset': u'utf-8'}, allow_redirects=True </msg>
<msg timestamp="20190108 11:35:07.660" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190108 11:35:07.660" starttime="20190108 11:35:07.432"></status>
</kw>
<kw name="Log" library="std">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.660" level="INFO">{"ID":15,"Title":"Teste com Robot Framework","Description":"Conceitos de RF","PageCount":400,"Excerpt":"SS","PublishDate":"2018-12-14T13:40:49.455Z"}</msg>
<status status="PASS" endtime="20190108 11:35:07.660" starttime="20190108 11:35:07.660"></status>
</kw>
<kw name="Set Test Variable" library="std">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.660" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190108 11:35:07.660" starttime="20190108 11:35:07.660"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:07.660" starttime="20190108 11:35:07.430"></status>
</kw>
<kw name="Check status code and reason" library="keywords-faker-api">
<arguments>
<arg>200</arg>
<arg>OK</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="std">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>${status_code_expected}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.670" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190108 11:35:07.670" starttime="20190108 11:35:07.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="std">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.reason}</arg>
<arg>${reason_expected}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.671" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190108 11:35:07.671" starttime="20190108 11:35:07.670"></status>
</kw>
<kw name="Log" library="std">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code} - ${response.reason}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.671" level="INFO">200 - OK</msg>
<status status="PASS" endtime="20190108 11:35:07.671" starttime="20190108 11:35:07.671"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:07.672" starttime="20190108 11:35:07.660"></status>
</kw>
<kw name="Check if Title of the book is correct" library="keywords-faker-api">
<arguments>
<arg>Teste com Robot Framework</arg>
</arguments>
<kw name="Dictionary Should Contain Item" library="collection">
<doc>An item of ``key``/``value`` must be found in a `dictionary`.</doc>
<arguments>
<arg>${response.json()}</arg>
<arg>Title</arg>
<arg>${title_expected}</arg>
</arguments>
<status status="PASS" endtime="20190108 11:35:07.673" starttime="20190108 11:35:07.672"></status>
</kw>
<kw name="Log" library="std">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()["Title"]}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.674" level="INFO">Teste com Robot Framework</msg>
<status status="PASS" endtime="20190108 11:35:07.674" starttime="20190108 11:35:07.673"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:07.674" starttime="20190108 11:35:07.672"></status>
</kw>
<kw name="Check if PageCount of the book is correct" library="keywords-faker-api">
<arguments>
<arg>400</arg>
</arguments>
<kw name="Convert To Integer" library="std">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${pagecount_expected}</arg>
</arguments>
<assign>
<var>${pagecount_expected_convert}</var>
</assign>
<msg timestamp="20190108 11:35:07.675" level="INFO">${pagecount_expected_convert} = 400</msg>
<status status="PASS" endtime="20190108 11:35:07.675" starttime="20190108 11:35:07.675"></status>
</kw>
<kw name="Should Be Equal As Integers" library="std">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.json()["PageCount"]}</arg>
<arg>${pagecount_expected_convert}</arg>
</arguments>
<status status="PASS" endtime="20190108 11:35:07.676" starttime="20190108 11:35:07.675"></status>
</kw>
<kw name="Log" library="std">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()["PageCount"]}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.676" level="INFO">400</msg>
<status status="PASS" endtime="20190108 11:35:07.677" starttime="20190108 11:35:07.676"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:07.677" starttime="20190108 11:35:07.674"></status>
</kw>
<kw name="Check if Description of the book is correct" library="keywords-faker-api">
<arguments>
<arg>Conceitos de RF</arg>
</arguments>
<kw name="Dictionary Should Contain Item" library="collection">
<doc>An item of ``key``/``value`` must be found in a `dictionary`.</doc>
<arguments>
<arg>${response.json()}</arg>
<arg>Description</arg>
<arg>${description_expected}</arg>
</arguments>
<status status="PASS" endtime="20190108 11:35:07.679" starttime="20190108 11:35:07.678"></status>
</kw>
<kw name="Log" library="std">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()["Description"]}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.680" level="INFO">Conceitos de RF</msg>
<status status="PASS" endtime="20190108 11:35:07.680" starttime="20190108 11:35:07.679"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:07.681" starttime="20190108 11:35:07.677"></status>
</kw>
<tags>
<tag>update</tag>
</tags>
<status status="PASS" endtime="20190108 11:35:07.681" critical="yes" starttime="20190108 11:35:07.429"></status>
</test>
<test id="s1-t3" name="TestCase 03: Remove a book">
<kw name="Delete a existing book ID=" library="keywords-faker-api">
<arguments>
<arg>200</arg>
</arguments>
<kw name="Delete Request" library="request">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>alias=fakerapi</arg>
<arg>uri=${URI}/${id_book}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190108 11:35:07.908" level="INFO">Delete Request using : alias=fakerapi, uri=Books/200, data=None,                     headers=None, allow_redirects=True </msg>
<msg timestamp="20190108 11:35:07.908" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190108 11:35:07.908" starttime="20190108 11:35:07.685"></status>
</kw>
<kw name="Log" library="std">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.text}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.908" level="INFO"></msg>
<status status="PASS" endtime="20190108 11:35:07.908" starttime="20190108 11:35:07.908"></status>
</kw>
<kw name="Set Test Variable" library="std">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.908" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20190108 11:35:07.908" starttime="20190108 11:35:07.908"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:07.908" starttime="20190108 11:35:07.684"></status>
</kw>
<kw name="Check status code and reason" library="keywords-faker-api">
<arguments>
<arg>200</arg>
<arg>OK</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="std">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>${status_code_expected}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.918" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190108 11:35:07.918" starttime="20190108 11:35:07.918"></status>
</kw>
<kw name="Should Be Equal As Strings" library="std">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.reason}</arg>
<arg>${reason_expected}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.918" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20190108 11:35:07.918" starttime="20190108 11:35:07.918"></status>
</kw>
<kw name="Log" library="std">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code} - ${response.reason}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.918" level="INFO">200 - OK</msg>
<status status="PASS" endtime="20190108 11:35:07.918" starttime="20190108 11:35:07.918"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:07.918" starttime="20190108 11:35:07.918"></status>
</kw>
<kw name="Check if book was removed" library="keywords-faker-api">
<kw name="Dictionary Should Contain Item" library="collection">
<doc>An item of ``key``/``value`` must be found in a `dictionary`.</doc>
<arguments>
<arg>${response.headers}</arg>
<arg>content-length</arg>
<arg>0</arg>
</arguments>
<status status="PASS" endtime="20190108 11:35:07.918" starttime="20190108 11:35:07.918"></status>
</kw>
<kw name="Log" library="std">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers["content-length"]}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.918" level="INFO">0</msg>
<status status="PASS" endtime="20190108 11:35:07.918" starttime="20190108 11:35:07.918"></status>
</kw>
<kw name="Should Be Empty" library="std">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${response.content}</arg>
</arguments>
<msg timestamp="20190108 11:35:07.918" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20190108 11:35:07.918" starttime="20190108 11:35:07.918"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:07.918" starttime="20190108 11:35:07.918"></status>
</kw>
<tags>
<tag>delete</tag>
</tags>
<status status="PASS" endtime="20190108 11:35:07.918" critical="yes" starttime="20190108 11:35:07.683"></status>
</test>
<kw type="teardown" name="Disconnect API" library="keywords-faker-api">
<kw name="Delete All Sessions" library="request">
<doc>Removes all the session objects</doc>
<msg timestamp="20190108 11:35:07.928" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20190108 11:35:07.928" starttime="20190108 11:35:07.928"></status>
</kw>
<status status="PASS" endtime="20190108 11:35:07.928" starttime="20190108 11:35:07.928"></status>
</kw>
<doc>Praticing concepts: test suite for insert, update
and delete books using API "FakeRestAPI.Web".</doc>
<status status="PASS" endtime="20190108 11:35:07.928" starttime="20190108 11:35:04.571"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">delete</stat>
<stat fail="0" pass="1">insert</stat>
<stat fail="0" pass="1">update</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="Test-Suite-Manipulation-Data" pass="3">Test-Suite-Manipulation-Data</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
